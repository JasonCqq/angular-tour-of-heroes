{"ast":null,"code":"var _class;\nimport { of } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log(`fetched heroes`)), catchError(this.handleError(\"getHeroes\", [])));\n  }\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError(\"updateHero\")));\n  }\n  handleError(operation = \"operation\", result) {\n    return error => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = \"api/heroes\"; // api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["of","HttpHeaders","catchError","tap","HeroService","getHeroes","http","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","updateHero","hero","put","httpOptions","operation","result","error","console","message","messageService","add","constructor","headers","i0","ɵɵinject","i1","MessageService","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/jason21715/Desktop/angular-tour-of-heroes/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Hero } from \"./hero\";\nimport { HEROES } from \"./mock-heroes\";\nimport { Observable, of } from \"rxjs\";\nimport { MessageService } from \"./message.service\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map, tap } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HeroService {\n  private heroesUrl = \"api/heroes\"; // api\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl).pipe(\n      tap((_) => this.log(`fetched heroes`)),\n      catchError(this.handleError<Hero[]>(\"getHeroes\", [])),\n    );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap((_) => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`)),\n    );\n  }\n\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((_) => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>(\"updateHero\")),\n    );\n  }\n\n  httpOptions = {\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\n  };\n\n  private handleError<T>(operation = \"operation\", result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  constructor(\n    private messageService: MessageService,\n    private http: HttpClient,\n  ) {}\n}\n"],"mappings":";AAGA,SAAqBA,EAAE,QAAQ,MAAM;AAErC,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAKrD,OAAM,MAAOC,WAAW;EAGtBC,SAASA,CAAA;IACP,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CAACC,IAAI,CAC/CN,GAAG,CAAEO,CAAC,IAAK,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACtCT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACH;EAEAC,OAAOA,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,SAAS,IAAIM,EAAE,EAAE;IACrC,OAAO,IAAI,CAACR,IAAI,CAACC,GAAG,CAAOQ,GAAG,CAAC,CAACN,IAAI,CAClCN,GAAG,CAAEO,CAAC,IAAK,IAAI,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC7CZ,UAAU,CAAC,IAAI,CAACU,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEAE,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAC,IAAI,CAACV,SAAS,EAAES,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACV,IAAI,CAC/DN,GAAG,CAAEO,CAAC,IAAK,IAAI,CAACC,GAAG,CAAC,mBAAmBM,IAAI,CAACH,EAAE,EAAE,CAAC,CAAC,EAClDZ,UAAU,CAAC,IAAI,CAACU,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EACH;EAMQA,WAAWA,CAAIQ,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAACX,GAAG,CAAC,GAAGS,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MACjD,OAAOxB,EAAE,CAACqB,MAAW,CAAC;IACxB,CAAC;EACH;EAEQV,GAAGA,CAACa,OAAe;IACzB,IAAI,CAACC,cAAc,CAACC,GAAG,CAAC,gBAAgBF,OAAO,EAAE,CAAC;EACpD;EAEAG,YACUF,cAA8B,EAC9BnB,IAAgB;IADhB,KAAAmB,cAAc,GAAdA,cAAc;IACd,KAAAnB,IAAI,GAAJA,IAAI;IA1CN,KAAAE,SAAS,GAAG,YAAY,CAAC,CAAC;IAwBlC,KAAAW,WAAW,GAAG;MACZS,OAAO,EAAE,IAAI3B,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAiBE;;SA5CQG,WAAW;;mBAAXA,MAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;;SAAX9B,MAAW;EAAA+B,OAAA,EAAX/B,MAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}